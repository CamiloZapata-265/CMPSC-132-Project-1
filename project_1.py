# -*- coding: utf-8 -*-
"""Project-1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I6Bupc5t6YTQcWyDglvqFXgJTQiLOTBS
"""



from abc import ABC, abstractmethod


class Product:
  def __init__(self, product_id, name, price, quantity): # Class Product with attributes Product_id, name, price and quantity
    self.product_id = product_id
    self.name = name
    self.price = price
    self.quantity = quantity

  def update_quantity(self, new_quantity): # Method for changing quantity of product
    self.quantity = new_quantity

  def get_product_info(self): # method for printing the attributes of Name, Price, quantity, and Product ID.
    print(f'Name: {self.name}')
    print(f'Price: {self.price}$')
    print(f'Quantity: {self.quantity}')
    print(f'Product ID: {self.product_id}')


class DigitalProduct(Product): # Digital Product class derived from Product class having file_size and download_link as additional atrributes
  def __init__(self, product_id, name, price, quantity, file_size, download_link):
    super().__init__(product_id, name, price, quantity) # super function avoiding code redundancy and giving access to the attributes of Product, name, price, product id and quantity.
    self.file_size = file_size
    self.download_link = download_link

  def get_product_info(self): # Method printing all the atributes of the Product.
    super().get_product_info()
    print(f'File Size: {self.file_size}')
    print(f'Download Link: {self.download_link}')


class PhysicalProduct(Product): # Product PhysicalProduct derived from product with additional attributes weight, dimensions, shipping_cost
  def __init__(self, product_id, name, price, quantity, weight, dimensions, shipping_cost):
    super().__init__(product_id, name, price, quantity) # super fucntion calling the method of the Product class to initialized the inherited attributes product id, name, price, quantity
    self.weight = weight
    self.dimensions = dimensions
    self.shipping_cost = shipping_cost

  def get_product_info(self): # Method printing the atrributes of the product
    super().get_product_info()
    print(f'Weigth: {self.weight}kg')
    print(f'Dimensions: {self.dimensions}')
    print(f'Shiping Cost: {self.shipping_cost}')


class Cart: # Class cart with initialized atrribute __cart_items that is private and empty list
  def __init__(self):
    self.__cart_items = []

  def add_products(self, product): # method that appends the product to the cart
    self.__cart_items.append(product)

  def remove_product(self, product_id): # method that removes product from the cart
      self.__cart_items.remove(product_id)

  def view_cart(self): # method for viewing the cart
    for product in self.__cart_items: # for loop that goes through each product in __cart_items list.
      product.get_product_info() # Prints the info of the Product from the previos methods from the Product class

  def calculate_total(self): # Method for calculating the total cost
    total = 0 # total set to 0
    for product in self.__cart_items: # for loop that goes through each product in __cart_items and it multiplies the price and the quantity of the product with incrementing the price of each product.
      total += product.price * product.quantity
    return total
  def clear(self): # Method for clearing the cart
    self.__cart_items.clear()  # Clears all items in the cart
    print("The cart has been cleared.")



class User:
  def __init__(self, user_id, name, cart):  # Class user with attributes user_id, name, cart
    self.user_id = user_id
    self.name = name
    self.cart = cart

  def add_to_cart(self, product): # Method for adding products into the users cart
    self.cart.add_products(product) # add_products derived from Cart class

  def remove_from_cart(self, product_id): # Method for removing products from the users cart
    self.cart.remove_product(product_id) # using methods from Cart class to remove products from the User class

  def checkout(self, discount): # method for user checking its check out total that is used from the cart class that calculates the total price of the products and option for discount
    total = self.cart.calculate_total()
    if discount: # If statement if discount is applied then it will be applied to the total
      total = discount.apply_discount(total)
    print(f'Total:{total: .2f}$') # printing out total with 2 decimal places


class Discount: # Discount class that is not initialized but blueprint for the other subclasses
  @abstractmethod
  def apply_discount(self, total):
    pass

class PercentageDiscount(Discount): # Class PercentageDiscount that is a subsclass of Discount with instant attribute percentage
  def __init__(self, percentage):
    self.percentage = percentage

  def apply_discount(self, total): # method to implement apply_discount from Discount class that returns the total minus the total multiplied by the precentage decimal.
    return total - (total * (self.percentage / 100))

class FixedAmountDiscount(Discount): # Class FixedAmountDiscount that is a subclass of Discount with instant attribute amount
  def __init__(self, amount):
    self.amount = amount

  def apply_discount(self, total_amount): # method to implement apply_discount from Discount class that returns the total minus the amount
    return total_amount - self.amount



apple = DigitalProduct(34, 'Apple', 5, 2, '1MB', 'www.apple.com/download')
banana = DigitalProduct(35, 'Banana', 3, 3, '2MB', 'www.banana.com/download')

shirt = PhysicalProduct(36, 'Shirt', 26, 1, '0.5', 'L', 50)
shorts = PhysicalProduct(37, 'Pants', 15, 2, '1', 'M', 70)
shoes = PhysicalProduct(38, 'Shoes', 90, 1, '1.2', '8', 100)


Camilo = User(1, 'Camilo', Cart())
Jonathan = User(2, 'Jonathan', Cart())

Camilo.add_to_cart(apple)
Camilo.add_to_cart(banana)
Jonathan.add_to_cart(shirt)
Jonathan.add_to_cart(shorts)
Jonathan.add_to_cart(shoes)
Camilo.remove_from_cart(apple)
Camilo.cart.view_cart()

percentage_discount = PercentageDiscount(10)  # Apply 10% discount
fixed_amount_discount = FixedAmountDiscount(15) # 15 dollars off

price_before = Camilo.cart.calculate_total()
print(f"Camilo's total before discount:{price_before: .2f}$")
Camilo.checkout(percentage_discount)